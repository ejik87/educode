import telebot
import config
from telebot import types

bot = telebot.TeleBot(config.TG_TOKEN)  # –°–æ–∑–¥–∞–¥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞


@bot.message_handler(commands=['start', 'help'])
def welcome(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("–ú–µ–Ω—é", callback_data='menu1')
    btn2 = types.InlineKeyboardButton("–ï—â—ë –º–µ–Ω—é", callback_data='menu2')
    btn3 = types.InlineKeyboardButton("–ò —Ç—É—Ç –º–µ–Ω—é", callback_data='menu3')
    btn4 = types.InlineKeyboardButton("–∑–∞–∫—Ä—ã—Ç—å –≤—Å—ë —ç—Ç–æ", callback_data='menu4')
    markup.add(btn1, btn2, btn3, btn4)

    # sticker01 = open('static/welcome.webp', 'rb')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞ —Ä–µ–∂–∏–º —á—Ç–µ–Ω–∏—è –±–∞–π—Ç–æ–≤—ã–π
    # bot.send_sticker(message.chat.id, sticker01)  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –∫–æ–º–∞–Ω–¥—ã
    bot.send_message(message.chat.id,
                     f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n–Ø - <b>{bot.get_me().first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–¥–æ–ø—ã—Ç–Ω—ã–º –∫—Ä–æ–ª–∏–∫–æ–º.",
                     parse_mode='html')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –º–Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å', reply_markup=markup)


@bot.message_handler(content_types=['text'])  # –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def respond_foo(message):
    if message.chat.type == 'ptivate':
        if message.text == '–û—Ç–≤–µ—Ç1':
            bot.send_message(message.chat.id, str(1))
    else:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline_menu(call):
    try:
        if call.message:
            match call.data:
                case 'menu1':
                    bot.send_message(call.message.chat.id, '–¢–´ –≤—ã–±—Ä–∞–ª –º–µ–Ω—é ‚Ññ1 üòä')
                    # show alert
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–í–æ—É! –¢—ã –Ω–∞–∂–∞–ª –º–µ–Ω—é 1!")
                case 'menu2':
                    bot.send_message(call.message.chat.id, '–¢–´ –≤—ã–±—Ä–∞–ª –º–µ–Ω—é ‚Ññ2 üòä')
                    # show alert
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–í–æ—É! –¢—ã –Ω–∞–∂–∞–ª –º–µ–Ω—é 2!")  # show_alert=True –î–∞—ë—Ç –æ–∫–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                case 'menu3':
                    bot.send_message(call.message.chat.id, '–¢–´ –≤—ã–±—Ä–∞–ª –º–µ–Ω—é ‚Ññ3 üòä')
                    # show alert
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–í–æ—É! –¢—ã –Ω–∞–∂–∞–ª –º–µ–Ω—é 3!")
                case 'menu4':
                    # bot.send_message(call.message.chat.id, '–¢–´ –≤—ã–±—Ä–∞–ª –º–µ–Ω—é ‚Ññ4 üòä')
                    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â—é—Ö—É —Å –º–µ–Ω—é
                    # bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                    #                       text="–í—ã–±–µ—Ä–∏ –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –º–Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å",
                    #                       reply_markup=None)
                    # show alert
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–í–æ—É! –¢—ã –Ω–∞–∂–∞–ª –ó–∞–∫—Ä—ã—Ç—å —ç—Ç–æ")
                case _:
                    pass
            #  –£–¥–∞–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
            # bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
            #                       text="–í—ã–±–µ—Ä–∏ –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –º–Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å",
            #                       reply_markup=None)
    except Exception as e:
        print(repr(e))


# RUN
bot.polling(none_stop=True)
